{"ast":null,"code":"//export const API_KEY = \"AIzaSyA5HgrkTuOXHr0-Ux_PqNDyZhXxlbIEwYU\";\nexport const API_KEY=\"AIzaSyAe6LpgDS3xXQG5Reh8h-PHqrEji5Nm33k\";// Calcular el promedio de las latitudes y longitudes\nexport const calculateCenter=points=>{if(!points)return{lat:40.4165,lng:-3.70256};let latSum=0;let lngSum=0;points.forEach(location=>{latSum+=location.valueLat;lngSum+=location.valueLong;});const centerLat=latSum/points.length;const centerLng=lngSum/points.length;return{lat:centerLat,lng:centerLng};};// Calcular el zoom del mapa\nexport const calculateZoom=points=>{// Puedes ajustar estos valores según tus necesidades\nconsole.log(points);const minLat=Math.min(...points.map(point=>point.valueLat));const maxLat=Math.max(...points.map(point=>point.valueLat));const minLng=Math.min(...points.map(point=>point.valueLong));const maxLng=Math.max(...points.map(point=>point.valueLong));// Calcula la diferencia entre las latitudes y longitudes máximas y mínimas\nconst latSpan=maxLat-minLat;const lngSpan=maxLng-minLng;// Puedes ajustar este valor para controlar el nivel de zoom\nconst maxZoom=15;// Calcula el zoom basado en la diferencia entre las coordenadas\nconst zoom=Math.min(maxZoom,Math.floor(Math.min(Math.log2(360/lngSpan),Math.log2(180/latSpan))));return zoom;};const degreesToRadians=degrees=>{return degrees*(Math.PI/180);};export const calculateDistance=function(pos1,pos2){let unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"km\";const R=unit===\"km\"?6371:3958.8;// Radio de la Tierra en kilómetros o millas\nconst lat1Rad=degreesToRadians(pos1.latitude);const lon1Rad=degreesToRadians(pos1.longitude);const lat2Rad=degreesToRadians(pos2.latitude);const lon2Rad=degreesToRadians(pos2.longitude);const deltaLat=lat2Rad-lat1Rad;const deltaLon=lon2Rad-lon1Rad;const a=Math.sin(deltaLat/2)*Math.sin(deltaLat/2)+Math.cos(lat1Rad)*Math.cos(lat2Rad)*Math.sin(deltaLon/2)*Math.sin(deltaLon/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));const distance=R*c;return distance;};export const getLocationNameByCoordinates=async location=>{var url=\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+location.latitude+\",\"+location.longitude+\"&key=\"+API_KEY;const response=await fetch(url);const data=await response.json();if(data.status===\"OK\"){return{status:data.status,data:data.results[0].formatted_address};}else{return{status:data.status};}};","map":{"version":3,"names":["API_KEY","calculateCenter","points","lat","lng","latSum","lngSum","forEach","location","valueLat","valueLong","centerLat","length","centerLng","calculateZoom","console","log","minLat","Math","min","map","point","maxLat","max","minLng","maxLng","latSpan","lngSpan","maxZoom","zoom","floor","log2","degreesToRadians","degrees","PI","calculateDistance","pos1","pos2","unit","arguments","undefined","R","lat1Rad","latitude","lon1Rad","longitude","lat2Rad","lon2Rad","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","distance","getLocationNameByCoordinates","url","response","fetch","data","json","status","results","formatted_address"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/club-ui/src/utils/map.ts"],"sourcesContent":["import { Coordinates, LocationByCoordinates, LocationDetailsWithAddress } from \"types/entities/Location\";\nimport LocationInfo from 'types/entities/Location';\n\n//export const API_KEY = \"AIzaSyA5HgrkTuOXHr0-Ux_PqNDyZhXxlbIEwYU\";\nexport const API_KEY = \"AIzaSyAe6LpgDS3xXQG5Reh8h-PHqrEji5Nm33k\";\n\n// Calcular el promedio de las latitudes y longitudes\nexport const calculateCenter = (points?: LocationInfo[]) => {\n\tif (!points) return { lat: 40.4165, lng: -3.70256 };\n\n\tlet latSum = 0;\n\tlet lngSum = 0;\n\n\tpoints.forEach((location) => {\n\t\tlatSum += location.valueLat;\n\t\tlngSum += location.valueLong;\n\t});\n\n\tconst centerLat = latSum / points.length;\n\tconst centerLng = lngSum / points.length;\n\n\treturn { lat: centerLat, lng: centerLng };\n};\n\n// Calcular el zoom del mapa\nexport const calculateZoom = (points: LocationInfo[]) => {\n\t// Puedes ajustar estos valores según tus necesidades\n\tconsole.log(points)\n\tconst minLat = Math.min(...points.map((point) => point.valueLat));\n\tconst maxLat = Math.max(...points.map((point) => point.valueLat));\n\tconst minLng = Math.min(...points.map((point) => point.valueLong));\n\tconst maxLng = Math.max(...points.map((point) => point.valueLong));\n\t\n\t// Calcula la diferencia entre las latitudes y longitudes máximas y mínimas\n\tconst latSpan = maxLat - minLat;\n\tconst lngSpan = maxLng - minLng;\n\n\t// Puedes ajustar este valor para controlar el nivel de zoom\n\tconst maxZoom = 15;\n\n\t// Calcula el zoom basado en la diferencia entre las coordenadas\n\tconst zoom = Math.min(\n\t\tmaxZoom,\n\t\tMath.floor(Math.min(Math.log2(360 / lngSpan), Math.log2(180 / latSpan)))\n\t);\n\n\treturn zoom;\n};\n\nconst degreesToRadians = (degrees: number): number => {\n\treturn degrees * (Math.PI / 180);\n};\n\nexport const calculateDistance = (\n\tpos1: Coordinates,\n\tpos2: Coordinates,\n\tunit: string = \"km\"\n): number => {\n\tconst R = unit === \"km\" ? 6371 : 3958.8; // Radio de la Tierra en kilómetros o millas\n\n\tconst lat1Rad = degreesToRadians(pos1.latitude);\n\tconst lon1Rad = degreesToRadians(pos1.longitude);\n\tconst lat2Rad = degreesToRadians(pos2.latitude);\n\tconst lon2Rad = degreesToRadians(pos2.longitude);\n\n\tconst deltaLat = lat2Rad - lat1Rad;\n\tconst deltaLon = lon2Rad - lon1Rad;\n\n\tconst a =\n\t\tMath.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\n\t\tMath.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n\n\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\tconst distance = R * c;\n\n\treturn distance;\n};\n\nexport const getLocationNameByCoordinates = async (location: Coordinates) => {\n\tvar url =\n\t\t\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\n\t\tlocation.latitude +\n\t\t\",\" +\n\t\tlocation.longitude +\n\t\t\"&key=\" +\n\t\tAPI_KEY;\n\n\tconst response = await fetch(url);\n\tconst data = await response.json();\n\n\tif (data.status === \"OK\") {\n\t\treturn {status: data.status, data: data.results[0].formatted_address};\n\t} else {\n\t\treturn {status: data.status};\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}