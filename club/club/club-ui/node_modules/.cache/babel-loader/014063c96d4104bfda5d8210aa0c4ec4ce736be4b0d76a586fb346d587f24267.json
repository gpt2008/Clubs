{"ast":null,"code":"import { compareSegments, validateAndParse } from './utils';\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1, v2) => {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n  return 0;\n};","map":{"version":3,"names":["compareSegments","validateAndParse","compareVersions","v1","v2","n1","n2","p1","pop","p2","r","split"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/dentycard-policlinico-bo-ui/node_modules/compare-versions/src/compareVersions.ts"],"sourcesContent":["import { compareSegments, validateAndParse } from './utils';\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1: string, v2: string) => {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n};\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,SAAS;AAE3D;;;;;;;AAOA,OAAO,MAAMC,eAAe,GAAGA,CAACC,EAAU,EAAEC,EAAU,KAAI;EACxD;EACA,MAAMC,EAAE,GAAGJ,gBAAgB,CAACE,EAAE,CAAC;EAC/B,MAAMG,EAAE,GAAGL,gBAAgB,CAACG,EAAE,CAAC;EAE/B;EACA,MAAMG,EAAE,GAAGF,EAAE,CAACG,GAAG,EAAE;EACnB,MAAMC,EAAE,GAAGH,EAAE,CAACE,GAAG,EAAE;EAEnB;EACA,MAAME,CAAC,GAAGV,eAAe,CAACK,EAAE,EAAEC,EAAE,CAAC;EACjC,IAAII,CAAC,KAAK,CAAC,EAAE,OAAOA,CAAC;EAErB;EACA,IAAIH,EAAE,IAAIE,EAAE,EAAE;IACZ,OAAOT,eAAe,CAACO,EAAE,CAACI,KAAK,CAAC,GAAG,CAAC,EAAEF,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC;GACrD,MAAM,IAAIJ,EAAE,IAAIE,EAAE,EAAE;IACnB,OAAOF,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;;EAGpB,OAAO,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}