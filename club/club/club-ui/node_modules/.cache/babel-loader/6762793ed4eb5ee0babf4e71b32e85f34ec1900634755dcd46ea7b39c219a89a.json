{"ast":null,"code":"import { semver } from './utils';\n/**\n * Validate [semver](https://semver.org/) version strings.\n *\n * @param version Version number to validate\n * @returns `true` if the version number is a valid semver version number, `false` otherwise.\n *\n * @example\n * ```\n * validate('1.0.0-rc.1'); // return true\n * validate('1.0-rc.1'); // return false\n * validate('foo'); // return false\n * ```\n */\nexport const validate = version => typeof version === 'string' && /^[v\\d]/.test(version) && semver.test(version);\n/**\n * Validate [semver](https://semver.org/) version strings strictly. Will not accept wildcards and version ranges.\n *\n * @param version Version number to validate\n * @returns `true` if the version number is a valid semver version number `false` otherwise\n *\n * @example\n * ```\n * validate('1.0.0-rc.1'); // return true\n * validate('1.0-rc.1'); // return false\n * validate('foo'); // return false\n * ```\n */\nexport const validateStrict = version => typeof version === 'string' && /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/.test(version);","map":{"version":3,"names":["semver","validate","version","test","validateStrict"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/dentycard-policlinico-bo-ui/node_modules/compare-versions/src/validate.ts"],"sourcesContent":["import { semver } from './utils';\n\n/**\n * Validate [semver](https://semver.org/) version strings.\n *\n * @param version Version number to validate\n * @returns `true` if the version number is a valid semver version number, `false` otherwise.\n *\n * @example\n * ```\n * validate('1.0.0-rc.1'); // return true\n * validate('1.0-rc.1'); // return false\n * validate('foo'); // return false\n * ```\n */\nexport const validate = (version: string) =>\n  typeof version === 'string' && /^[v\\d]/.test(version) && semver.test(version);\n\n/**\n * Validate [semver](https://semver.org/) version strings strictly. Will not accept wildcards and version ranges.\n *\n * @param version Version number to validate\n * @returns `true` if the version number is a valid semver version number `false` otherwise\n *\n * @example\n * ```\n * validate('1.0.0-rc.1'); // return true\n * validate('1.0-rc.1'); // return false\n * validate('foo'); // return false\n * ```\n */\nexport const validateStrict = (version: string) =>\n  typeof version === 'string' &&\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/.test(\n    version\n  );\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC;;;;;;;;;;;;;AAaA,OAAO,MAAMC,QAAQ,GAAIC,OAAe,IACtC,OAAOA,OAAO,KAAK,QAAQ,IAAI,QAAQ,CAACC,IAAI,CAACD,OAAO,CAAC,IAAIF,MAAM,CAACG,IAAI,CAACD,OAAO,CAAC;AAE/E;;;;;;;;;;;;;AAaA,OAAO,MAAME,cAAc,GAAIF,OAAe,IAC5C,OAAOA,OAAO,KAAK,QAAQ,IAC3B,qLAAqL,CAACC,IAAI,CACxLD,OAAO,CACR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}