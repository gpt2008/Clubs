{"ast":null,"code":"import{Form,message}from\"antd\";//import FormErrorField from \"../utils/form/formErrorField\";\nimport{useTranslation}from\"react-i18next\";import FormUtils from\"utils/formUtils\";import'./NewPassword.scss';import{Rest}from\"utils/utils\";import{useState}from\"react\";import{useParams}from\"react-router-dom\";import router from\"router\";import UpdatePassewordForm from\"components/updatePasswordForm/UpdatePasswordForm\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NewPassword=(/*props: IProps*/)=>{const{t}=useTranslation(['changePassword']);const[form]=Form.useForm();const[errorFields,setErrorFields]=useState();let{token}=useParams();const setupNewPassword=form=>{setErrorFields([]);formValidation(form);};const formValidation=form=>{form.validateFields().then(values=>{internalValidation(values,true);}).catch(info=>{internalValidation(info.values,false);});};const internalValidation=(values,formValidationSucceded)=>{validatePassword(values).then(errors=>{if(formValidationSucceded&&(!errors||errors.length===0)){save(values);}else{setErrorFields(errors);}});};const validatePassword=values=>{return new Promise(resolve=>{Rest().operation({type:'ValidateAltaPassword',password:values.newPassword,repeatedPassword:values.repeatedPassword,token:token}).then(result=>{let errors=[];if(result&&result.incorrectPassword){const passError={fieldName:'newPassword',errorMessage:t('incorrectPasswordSecurity')};errors=FormUtils.addError(errors,passError);}if(result&&result.incorrectRepeatedPassword){const passError={fieldName:'repeatedPassword',errorMessage:t('incorrectPasswordConfirmation')};errors=FormUtils.addError(errors,passError);}resolve(errors);});});};const save=values=>{Rest().operation({type:'SetupNewPassword',valueUUID:token,newPassword:values.newPassword}).then(response=>{if(response){router.navigate('/');message.success({style:{cursor:'pointer'},key:'changePassword:changePasswordSuccessful',content:t('changePassword:changePasswordSuccessful'),duration:0,onClick:()=>message.destroy('changePassword:changePasswordSuccessful')});}else{router.navigate('/oops');}});};return/*#__PURE__*/_jsx(\"div\",{className:\"forget-password-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"content\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"content title\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"Nueva contrase\\xF1a\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"content-inner\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-container password-box-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"intro-container\",children:[/*#__PURE__*/_jsx(\"p\",{children:t(\"newPassword\")}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:t(\"charactersLength\")}),/*#__PURE__*/_jsx(\"li\",{children:t(\"capitalConditionLabel\")}),/*#__PURE__*/_jsx(\"li\",{children:t(\"numberConditionLabel\")})]})]}),/*#__PURE__*/_jsx(UpdatePassewordForm,{form:form,errorFields:errorFields,setupPassword:setupNewPassword})]})})]})});};export default NewPassword;","map":{"version":3,"names":["Form","message","useTranslation","FormUtils","Rest","useState","useParams","router","UpdatePassewordForm","jsx","_jsx","jsxs","_jsxs","NewPassword","t","form","useForm","errorFields","setErrorFields","token","setupNewPassword","formValidation","validateFields","then","values","internalValidation","catch","info","formValidationSucceded","validatePassword","errors","length","save","Promise","resolve","operation","type","password","newPassword","repeatedPassword","result","incorrectPassword","passError","fieldName","errorMessage","addError","incorrectRepeatedPassword","valueUUID","response","navigate","success","style","cursor","key","content","duration","onClick","destroy","className","children","setupPassword"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/club-ui/src/pages/newPassword/NewPassword.tsx"],"sourcesContent":["\nimport { Button, Col, Form, FormInstance, Input, Row, Space, message } from \"antd\";\n//import FormErrorField from \"../utils/form/formErrorField\";\nimport { useTranslation } from \"react-i18next\";\nimport FormUtils from \"utils/formUtils\";\nimport './NewPassword.scss';\nimport { Store } from \"antd/es/form/interface\";\nimport { Rest } from \"utils/utils\";\nimport  FormErrorField  from \"utils/form/formErrorField\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport router from \"router\";\nimport UpdatePassewordForm from \"components/updatePasswordForm/UpdatePasswordForm\";\n\n\ninterface IProps {\n    //setupNewPassword: (form: FormInstance) => void;\n    //errorFields: FormErrorField[];\n}\n\n\n\nconst NewPassword = (/*props: IProps*/) => {\n    const { t } = useTranslation(['changePassword']);\n\n    const [form] = Form.useForm();\n    const [errorFields, setErrorFields] = useState<FormErrorField[]>();\n\n    let { token } = useParams();\n    \n\n    const setupNewPassword = (form: FormInstance) => {\n        setErrorFields([]);\n        formValidation(form);\n        \n    }\n\n    const formValidation = (form: FormInstance) => {\n        form.validateFields().then(values => {\n            internalValidation(values, true);\n        }).catch(info => {\n            internalValidation(info.values, false);\n        });\n    }\n\n    const internalValidation = (values: Store, formValidationSucceded: boolean) => {\n        validatePassword(values).then(errors => {\n            if (formValidationSucceded && (!errors || errors.length === 0)) {\n                save(values);\n            } else {\n                setErrorFields(errors);\n            }\n        });\n    }\n\n    const validatePassword = (values: Store) => {\n        return new Promise((resolve: (f: FormErrorField[]) => void) => {\n            Rest<{type: string, password: string, repeatedPassword: string, token: string}, {incorrectCurrentPassword:boolean, incorrectPassword: boolean, incorrectRepeatedPassword: boolean}>().operation({\n                type: 'ValidateAltaPassword',\n                password: values.newPassword,\n                repeatedPassword: values.repeatedPassword,\n                token: (token as string),\n            }).then(result => {\n                let errors: FormErrorField[] = [];\n\n                if (result && result.incorrectPassword) {\n                    const passError = {\n                        fieldName: 'newPassword',\n                        errorMessage: t('incorrectPasswordSecurity')\n                    };\n\n                    errors = FormUtils.addError(errors, passError);\n                }\n\n                if (result && result.incorrectRepeatedPassword) {\n                    const passError = {\n                        fieldName: 'repeatedPassword',\n                        errorMessage: t('incorrectPasswordConfirmation')\n                    };\n\n                    errors = FormUtils.addError(errors, passError);\n                }\n\n                resolve(errors);\n            });\n        });\n    }\n\n    const save = (values: Store) => {\n        Rest<{type: string, valueUUID: string, newPassword: string}, boolean>().operation({\n            type: 'SetupNewPassword',\n            valueUUID: (token as string),\n            newPassword: values.newPassword\n        }).then(response => {\n            if (response) {\n                router.navigate('/');\n                message.success({\n                    style: {cursor: 'pointer'},\n                    key: 'changePassword:changePasswordSuccessful',\n                    content: t('changePassword:changePasswordSuccessful'),\n                    duration: 0,\n                    onClick: () => message.destroy('changePassword:changePasswordSuccessful')\n                });\n            } else {\n                router.navigate('/oops');\n            }\n        });\n    }\n\n    return (\n\n        <div className=\"forget-password-container\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h3 className=\"content title\">\n\t\t\t\t\t<strong>Nueva contrase√±a</strong>\n\t\t\t\t</h3>\n\t\t\t\t<div className=\"content-inner\">\n\t\t\t\t\t<div className=\"welcome-container password-box-container\">\n\t\t\t\t\t\t<div className=\"intro-container\">\n\t\t\t\t\t\t\t<p>{t(\"newPassword\")}</p>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>{t(\"charactersLength\")}</li>\n\t\t\t\t\t\t\t\t<li>{t(\"capitalConditionLabel\")}</li>\n\t\t\t\t\t\t\t\t<li>{t(\"numberConditionLabel\")}</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<UpdatePassewordForm\n                            form={form} \n                            errorFields={errorFields}\n                            setupPassword={setupNewPassword}\n                        />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n    );\n}\n\nexport default NewPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}