{"ast":null,"code":"export const semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\nexport const validateAndParse = version => {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = version.match(semver);\n  if (!match) {\n    throw new Error(\"Invalid argument not valid semver ('\".concat(version, \"' received)\"));\n  }\n  match.shift();\n  return match;\n};\nconst isWildcard = s => s === '*' || s === 'x' || s === 'X';\nconst tryParse = v => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\nconst compareStrings = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\nexport const compareSegments = (a, b) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};","map":{"version":3,"names":["semver","validateAndParse","version","TypeError","match","Error","concat","shift","isWildcard","s","tryParse","v","n","parseInt","isNaN","forceType","a","b","String","compareStrings","ap","bp","compareSegments","i","Math","max","length","r"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/dentycard-policlinico-bo-ui/node_modules/compare-versions/src/utils.ts"],"sourcesContent":["/**\n * Allowed arithmetic operators\n */\nexport type CompareOperator = '>' | '>=' | '=' | '<' | '<=' | '!=';\n\nexport const semver =\n  /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nexport const validateAndParse = (version: string) => {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = version.match(semver);\n  if (!match) {\n    throw new Error(\n      `Invalid argument not valid semver ('${version}' received)`\n    );\n  }\n  match.shift();\n  return match;\n};\n\nconst isWildcard = (s: string) => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = (v: string) => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a: string | number, b: string | number) =>\n  typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a: string, b: string) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nexport const compareSegments = (\n  a: string | string[] | RegExpMatchArray,\n  b: string | string[] | RegExpMatchArray\n) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n"],"mappings":"AAKA,OAAO,MAAMA,MAAM,GACjB,4IAA4I;AAE9I,OAAO,MAAMC,gBAAgB,GAAIC,OAAe,IAAI;EAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAM,IAAIC,SAAS,CAAC,kCAAkC,CAAC;;EAEzD,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACJ,MAAM,CAAC;EACnC,IAAI,CAACI,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,wCAAAC,MAAA,CAC0BJ,OAAO,gBAAa,CAC5D;;EAEHE,KAAK,CAACG,KAAK,EAAE;EACb,OAAOH,KAAK;AACd,CAAC;AAED,MAAMI,UAAU,GAAIC,CAAS,IAAKA,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG;AAErE,MAAMC,QAAQ,GAAIC,CAAS,IAAI;EAC7B,MAAMC,CAAC,GAAGC,QAAQ,CAACF,CAAC,EAAE,EAAE,CAAC;EACzB,OAAOG,KAAK,CAACF,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC;AACzB,CAAC;AAED,MAAMG,SAAS,GAAGA,CAACC,CAAkB,EAAEC,CAAkB,KACvD,OAAOD,CAAC,KAAK,OAAOC,CAAC,GAAG,CAACC,MAAM,CAACF,CAAC,CAAC,EAAEE,MAAM,CAACD,CAAC,CAAC,CAAC,GAAG,CAACD,CAAC,EAAEC,CAAC,CAAC;AAEzD,MAAME,cAAc,GAAGA,CAACH,CAAS,EAAEC,CAAS,KAAI;EAC9C,IAAIT,UAAU,CAACQ,CAAC,CAAC,IAAIR,UAAU,CAACS,CAAC,CAAC,EAAE,OAAO,CAAC;EAC5C,MAAM,CAACG,EAAE,EAAEC,EAAE,CAAC,GAAGN,SAAS,CAACL,QAAQ,CAACM,CAAC,CAAC,EAAEN,QAAQ,CAACO,CAAC,CAAC,CAAC;EACpD,IAAIG,EAAE,GAAGC,EAAE,EAAE,OAAO,CAAC;EACrB,IAAID,EAAE,GAAGC,EAAE,EAAE,OAAO,CAAC,CAAC;EACtB,OAAO,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAC7BN,CAAuC,EACvCC,CAAuC,KACrC;EACF,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACT,CAAC,CAACU,MAAM,EAAET,CAAC,CAACS,MAAM,CAAC,EAAEH,CAAC,EAAE,EAAE;IACrD,MAAMI,CAAC,GAAGR,cAAc,CAACH,CAAC,CAACO,CAAC,CAAC,IAAI,GAAG,EAAEN,CAAC,CAACM,CAAC,CAAC,IAAI,GAAG,CAAC;IAClD,IAAII,CAAC,KAAK,CAAC,EAAE,OAAOA,CAAC;;EAEvB,OAAO,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}