{"ast":null,"code":"import { compareVersions } from './compareVersions';\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1, v2, operator) => {\n  // validate input operator\n  assertValidOperator(operator);\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n  return operatorResMap[operator].includes(res);\n};\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n  '!=': [-1, 1]\n};\nconst allowedOperators = Object.keys(operatorResMap);\nconst assertValidOperator = op => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\"Invalid operator type, expected string but got \".concat(typeof op));\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\"Invalid operator, expected one of \".concat(allowedOperators.join('|')));\n  }\n};","map":{"version":3,"names":["compareVersions","compare","v1","v2","operator","assertValidOperator","res","operatorResMap","includes","allowedOperators","Object","keys","op","TypeError","concat","indexOf","Error","join"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/club-ui/node_modules/compare-versions/src/compare.ts"],"sourcesContent":["import { compareVersions } from './compareVersions';\nimport { CompareOperator } from './utils';\n\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1: string, v2: string, operator: CompareOperator) => {\n  // validate input operator\n  assertValidOperator(operator);\n\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n\n  return operatorResMap[operator].includes(res);\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n  '!=': [-1, 1],\n};\n\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = (op: string) => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\n      `Invalid operator type, expected string but got ${typeof op}`\n    );\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`\n    );\n  }\n};\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mBAAmB;AAGnD;;;;;;;;;;;;;;;;;AAiBA,OAAO,MAAMC,OAAO,GAAGA,CAACC,EAAU,EAAEC,EAAU,EAAEC,QAAyB,KAAI;EAC3E;EACAC,mBAAmB,CAACD,QAAQ,CAAC;EAE7B;EACA;EACA,MAAME,GAAG,GAAGN,eAAe,CAACE,EAAE,EAAEC,EAAE,CAAC;EAEnC,OAAOI,cAAc,CAACH,QAAQ,CAAC,CAACI,QAAQ,CAACF,GAAG,CAAC;AAC/C,CAAC;AAED,MAAMC,cAAc,GAAG;EACrB,GAAG,EAAE,CAAC,CAAC,CAAC;EACR,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACZ,GAAG,EAAE,CAAC,CAAC,CAAC;EACR,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACb,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;EACT,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;CACb;AAED,MAAME,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC;AAEpD,MAAMF,mBAAmB,GAAIO,EAAU,IAAI;EACzC,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;IAC1B,MAAM,IAAIC,SAAS,mDAAAC,MAAA,CACiC,OAAOF,EAAE,CAAE,CAC9D;;EAEH,IAAIH,gBAAgB,CAACM,OAAO,CAACH,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;IACvC,MAAM,IAAII,KAAK,sCAAAF,MAAA,CACwBL,gBAAgB,CAACQ,IAAI,CAAC,GAAG,CAAC,CAAE,CAClE;;AAEL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}