{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTargetWaveColor = getTargetWaveColor;\nexports.isNotGrey = isNotGrey;\nexports.isValidWaveColor = isValidWaveColor;\nfunction isNotGrey(color) {\n  // eslint-disable-next-line no-useless-escape\n  const match = (color || '').match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\d.]*)?\\)/);\n  if (match && match[1] && match[2] && match[3]) {\n    return !(match[1] === match[2] && match[2] === match[3]);\n  }\n  return true;\n}\nfunction isValidWaveColor(color) {\n  return color && color !== '#fff' && color !== '#ffffff' && color !== 'rgb(255, 255, 255)' && color !== 'rgba(255, 255, 255, 1)' && isNotGrey(color) && !/rgba\\((?:\\d*, ){3}0\\)/.test(color) &&\n  // any transparent rgba color\n  color !== 'transparent';\n}\nfunction getTargetWaveColor(node) {\n  const {\n    borderTopColor,\n    borderColor,\n    backgroundColor\n  } = getComputedStyle(node);\n  if (isValidWaveColor(borderTopColor)) {\n    return borderTopColor;\n  }\n  if (isValidWaveColor(borderColor)) {\n    return borderColor;\n  }\n  if (isValidWaveColor(backgroundColor)) {\n    return backgroundColor;\n  }\n  return null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getTargetWaveColor","isNotGrey","isValidWaveColor","color","match","test","node","borderTopColor","borderColor","backgroundColor","getComputedStyle"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/club-ui/node_modules/antd/lib/_util/wave/util.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTargetWaveColor = getTargetWaveColor;\nexports.isNotGrey = isNotGrey;\nexports.isValidWaveColor = isValidWaveColor;\nfunction isNotGrey(color) {\n  // eslint-disable-next-line no-useless-escape\n  const match = (color || '').match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\d.]*)?\\)/);\n  if (match && match[1] && match[2] && match[3]) {\n    return !(match[1] === match[2] && match[2] === match[3]);\n  }\n  return true;\n}\nfunction isValidWaveColor(color) {\n  return color && color !== '#fff' && color !== '#ffffff' && color !== 'rgb(255, 255, 255)' && color !== 'rgba(255, 255, 255, 1)' && isNotGrey(color) && !/rgba\\((?:\\d*, ){3}0\\)/.test(color) &&\n  // any transparent rgba color\n  color !== 'transparent';\n}\nfunction getTargetWaveColor(node) {\n  const {\n    borderTopColor,\n    borderColor,\n    backgroundColor\n  } = getComputedStyle(node);\n  if (isValidWaveColor(borderTopColor)) {\n    return borderTopColor;\n  }\n  if (isValidWaveColor(borderColor)) {\n    return borderColor;\n  }\n  if (isValidWaveColor(backgroundColor)) {\n    return backgroundColor;\n  }\n  return null;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/CF,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7BH,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASD,SAASA,CAACE,KAAK,EAAE;EACxB;EACA,MAAMC,KAAK,GAAG,CAACD,KAAK,IAAI,EAAE,EAAEC,KAAK,CAAC,yCAAyC,CAAC;EAC5E,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IAC7C,OAAO,EAAEA,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1D;EACA,OAAO,IAAI;AACb;AACA,SAASF,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,OAAOA,KAAK,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,oBAAoB,IAAIA,KAAK,KAAK,wBAAwB,IAAIF,SAAS,CAACE,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAACE,IAAI,CAACF,KAAK,CAAC;EAC3L;EACAA,KAAK,KAAK,aAAa;AACzB;AACA,SAASH,kBAAkBA,CAACM,IAAI,EAAE;EAChC,MAAM;IACJC,cAAc;IACdC,WAAW;IACXC;EACF,CAAC,GAAGC,gBAAgB,CAACJ,IAAI,CAAC;EAC1B,IAAIJ,gBAAgB,CAACK,cAAc,CAAC,EAAE;IACpC,OAAOA,cAAc;EACvB;EACA,IAAIL,gBAAgB,CAACM,WAAW,CAAC,EAAE;IACjC,OAAOA,WAAW;EACpB;EACA,IAAIN,gBAAgB,CAACO,eAAe,CAAC,EAAE;IACrC,OAAOA,eAAe;EACxB;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}