{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports._statistic_build_ = void 0;\nexports.merge = merge;\nexports.statistic = void 0;\nconst enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nfunction merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @internal Internal Usage. Not use in your production. */\nconst statistic = exports.statistic = {};\n/** @internal Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nconst _statistic_build_ = exports._statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nconst statisticToken = token => {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic && typeof Proxy !== 'undefined') {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      var _a;\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n};\nvar _default = exports.default = statisticToken;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_statistic_build_","merge","statistic","enableStatistic","process","env","NODE_ENV","CSSINJS_STATISTIC","recording","_len","arguments","length","objs","Array","_key","assign","apply","concat","ret","forEach","obj","keys","key","configurable","enumerable","get","noop","statisticToken","token","tokenKeys","proxy","flush","Proxy","Set","prop","add","componentName","componentToken","_a","global","from","component","_default"],"sources":["/home/gpt2008/Desktop/Clubs/club/club/dentycard-policlinico-bo-ui/node_modules/antd/lib/theme/util/statistic.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports._statistic_build_ = void 0;\nexports.merge = merge;\nexports.statistic = void 0;\nconst enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nfunction merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @internal Internal Usage. Not use in your production. */\nconst statistic = exports.statistic = {};\n/** @internal Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nconst _statistic_build_ = exports._statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nconst statisticToken = token => {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic && typeof Proxy !== 'undefined') {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      var _a;\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n};\nvar _default = exports.default = statisticToken;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}